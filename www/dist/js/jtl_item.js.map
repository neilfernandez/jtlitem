{"version":3,"names":[],"mappings":"","sources":["jtl_item.js"],"sourcesContent":["/*\n * JTL Item v0.1 - http://apex.world/plugins/\n *\n * Licensed under ...: ?\n*/\n\n$.widget( \"tk.jtl_item\", {\n \n  // Default options.\n  options: {\n     lang: \"en\",\n     lang_codes: [\"en\",\"fr\",\"es\"],\n     messages: null,\n     fieldSize: 30,\n     fieldMaxLength: 80,\n     dialogTitle: null\n  },\n  _createPrivateStorage: function() {\n     var uiw = this;\n\n     uiw._values = {\n        apexItemId: '',\n        controlsId: '',\n        fieldSize: 30,\n        fieldMaxLength: 80,\n        dataJSON: {},\n        curr_lang_index: 0,\n        languages: {},\n        tagMap: {},\n        messages: $.parseJSON(uiw.options.messages),\n        totalLanguages: 0,\n        disabled: false,\n        focusOnClose: 'BUTTON', //BUTTON or INPUT,\n        newRecord: false,\n        signalChange: false\n     };\n\n     uiw._elements = {\n        $window: {},\n        $document: {},\n        $body: {},\n        $hiddenInput: {},\n        $displayInput: {},\n        $fieldset: {},\n        $mlsButton: {},\n        $dialog: {},\n        $dialogContent: {},\n        $saveButton: {},\n        $cancelButton: {},\n        $buttonContainer: {}\n     };\n  },\n  _create: function() {\n    var uiw = this;\n\n    // Options are already merged and stored in this.options (or uiw.options)\n\n    // helper function for finding the position of our current displayed language\n    function language_index (j, l) {\n      var i = null,\n          idx = -1;\n      for (i = 0; j.length > i && idx == -1; i += 1) {\n        if (j[i].l === l) {\n          idx = i;\n        }\n      }\n      return idx;\n    }\n\n    uiw._createPrivateStorage();\n    uiw._values.apexItemId = $(uiw.element).attr('id');\n    uiw._values.controlsId = uiw._values.apexItemId + '_fieldset';\n    uiw._initElements();\n    uiw._initBaseElements();\n\n    uiw._values.languages = JSON.parse(uiw.options.lang_codes);\n    uiw._values.totalLanguages = uiw._values.languages.length;\n\n    // get the fresh list of languages\n    uiw._initDataJSON();\n    uiw._initLanguageMap();\n    // Which position language are we using\n    uiw._values.curr_lang_index = language_index(uiw._values.dataJSON, uiw.options.lang);\n    \n    // Sync our hidden field with the actual value in the correct language, but\n    // also during page submit to make sure we submit the correct value \n    uiw._elements.$displayInput\n       .bind('change', {uiw: uiw}, uiw._syncHiddenField);\n    uiw._elements.$document\n       .bind('apexbeforepagesubmit', {uiw: uiw}, uiw._syncHiddenField);\n\n    uiw._elements.$mlsButton\n       .bind('click', {uiw: uiw}, uiw._handleOpenClick);\n\n    apex.debug.message(4,\"Registering with apex.widget.initPageItem: \" + uiw._elements.$displayInput.attr('id'));\n\n    apex.widget.initPageItem(uiw._elements.$hiddenInput.attr('id'), {\n       setValue: function(value, displayValue) {\n          uiw._elements.$displayInput.val(displayValue);\n          uiw._syncHiddenField();\n       },\n       getValue: function() {\n          return uiw._elements.$hiddenInput.val();\n       },\n       setFocus: function() {\n          uiw._elements.$displayInput.focus();\n       },\n       // show: function() {\n       //    uiw.show();\n       // },\n       // hide: function() {\n       //    uiw.hide();\n       // },\n       enable: function() {\n          uiw.enable();\n       },\n       disable: function() {\n          uiw.disable();\n       }\n    });\n\n  },\n  _initElements: function() {\n     var uiw = this;\n\n     uiw._elements.$window = $(window);\n     uiw._elements.$document = $(document);\n     uiw._elements.$body = $(document.body);\n     uiw._elements.$dialog = $('div.jtlitem-dialog');\n\n  },\n  _initDialogElements: function() {\n     var uiw = this;\n\n     uiw._elements.$dialog = $('div.jtlitem-dialog');\n     uiw._elements.$dialogContent = $('div.jtlitem-content');\n     uiw._elements.$saveButton = $('button.jtlitem-save-button');\n     uiw._elements.$cancelButton = $('button.jtlitem-cancel-button');\n\n  },\n  _initBaseElements: function() {\n     var uiw = this;\n\n     uiw._elements.$hiddenInput = uiw.element;\n     uiw._elements.$displayInput = $('#' + uiw._values.apexItemId + '_DISPLAY');\n     uiw._values.fieldSize = uiw._elements.$displayInput.attr(\"size\");\n     uiw._values.fieldMaxLength = uiw._elements.$displayInput.attr(\"maxlength\");\n\n     uiw._elements.$fieldset = $('#' + uiw._values.controlsId);\n     uiw._elements.$mlsButton =\n        uiw._elements.$fieldset.find('button.jtlitem-modal-open');\n  },\n  _initDataJSON: function(){\n     var uiw = this,\n         jsonData = [],\n         input_data = uiw._elements.$hiddenInput.val();\n\n     if (input_data) {\n        uiw._values.dataJSON = JSON.parse(input_data);\n        uiw._values.newRecord = false;\n     }\n     else {\n        // The record is empty so we build a \n        // build JSON with this structure to seed it:\n        //  [ {\"l\": \"us\", \"tl\": \"Project Analysis\"}\n        //  , {\"l\": \"fr\", \"tl\": \"Analyse de projet\"}\n        //  , {\"l\": \"es\", \"tl\": \"Analisis de projecto\"}]\n        uiw._values.languages.forEach(function(l) {\n           jsonData.push({\"l\": l, \"tl\": \"\"});\n        });\n        // Init the hidden item\n        uiw._elements.$hiddenInput.val(JSON.stringify(jsonData));\n        uiw._values.dataJSON = jsonData;\n        uiw._values.newRecord = true;\n     }\n\n  },\n  _syncHiddenField: function(eventObj) {\n     // var uiw = eventObj.data.uiw,\n     var uiw,\n         langJSON = {},\n         lang_index;\n\n     if (typeof eventObj != \"undefined\") {\n        // we were call from an event\n        uiw = eventObj.data.uiw;\n     }\n     else {\n        // direct call\n        uiw = this;\n     }\n\n     lang_index = uiw._values.curr_lang_index;\n\n     if (uiw._values.newRecord) {\n        // save the new text into the ALL the records in the JSON structure\n        for (var i = uiw._values.totalLanguages - 1; i >= 0; i--) {\n          uiw._values.dataJSON[i].tl = uiw._elements.$displayInput.val();\n        }\n     }\n     else {\n        // save the new text into the JSON structure\n        uiw._values.dataJSON[lang_index].tl = uiw._elements.$displayInput.val();\n     }\n     // place the full JSON back into the hidden item\n     uiw._elements.$hiddenInput.val(JSON.stringify(uiw._values.dataJSON));\n     // Keep the map fresh (only needed for the dialog)\n     uiw._initLanguageMap();\n  },\n  _initDialogButtons: function() {\n     var uiw = this;\n\n     uiw._elements.$cancelButton\n        .bind('click', {uiw: uiw}, uiw._handleCancelButtonClick);\n\n     uiw._elements.$saveButton\n        .bind('click', {uiw: uiw}, uiw._handleSaveButtonClick);\n\n  },\n  _handleCancelButtonClick: function(eventObj) {\n     var uiw = eventObj.data.uiw;\n     uiw._elements.$dialog.dialog('close'); // this should cascade to remove the dialog\n  },\n  _handleSaveButtonClick: function(eventObj) {\n     var uiw = eventObj.data.uiw,\n         display_value;\n\n     uiw._elements.$dialogContent.find('input').each(function(i,el){\n        apex.debug.message(4,i + \"(\" + el.dataset.lang + \"):\" + el.value);\n        uiw._values.dataJSON[i].l = el.dataset.lang;\n        uiw._values.dataJSON[i].tl = el.value;\n        if (uiw._values.curr_lang_index == i) {\n           display_value = el.value;\n        }\n     });\n\n     uiw._initLanguageMap();\n\n     // sync the items again\n     uiw._elements.$displayInput.val(display_value);\n     uiw._elements.$hiddenInput.val(JSON.stringify(uiw._values.dataJSON));\n     // uiw._signalChange();  // does the .val trigger a change already?\n     uiw._values.newRecord = false;\n\n     uiw._elements.$dialog.dialog('close'); // this should cascade to remove the dialog\n  },\n  _signalChange: function() {\n     var uiw = this,\n        hiddenElmt = uiw._elements.$hiddenInput[0],  // Do we use [0] or jquery object?\n        displayElmt = uiw._elements.$displayInput[0];\n\n     //Need apex.jQuery for the events to register with the DA framework\n     apex.jQuery(hiddenElmt).trigger('change');\n     apex.jQuery(displayElmt).trigger('change');\n  },\n  _handleOpenClick: function(eventObj) {\n     var uiw = eventObj.data.uiw;\n\n     uiw._syncHiddenField(eventObj);\n     uiw._showDialog();\n  },\n  _initLanguageMap: function() {\n     var uiw = this,\n         i = null,\n         tags = {};\n\n     tags = uiw._values.dataJSON;\n\n     // http://mattsnider.com/how-to-efficiently-search-a-json-array/\n     uiw._values.tagMap = {};\n     for (i = 0; tags.length > i; i += 1) {\n         uiw._values.tagMap[tags[i].l] = tags[i].tl;\n     }\n      \n  },\n  _hasTag: function(tagName) {\n     var uiw = this;\n     return uiw._values.tagMap[tagName];\n  },\n  _showDialog: function() {\n     var uiw = this,\n         langTable,\n         curr_lang = uiw._values.curr_lang_index,\n         dialogHtml;\n\n     langTable = \n           '<table class=\"t-Report-report\" summary=\"Available Translations\">\\n' +\n           ' <tr>\\n' +\n           '  <th class=\"t-Report-colHead\">' + uiw._values.messages.languageLabel + '</th>' +\n           '  <th class=\"t-Report-colHead u-tL\">' + uiw._values.messages.languageValue + '</th>' +\n           ' </tr>\\n' +\n           ' <tr>\\n';\n\n     $.each(uiw._values.languages, function( index, lang ) {\n       langTable +=\n       ' <tr>\\n' +\n       '  <td class=\"t-Report-cell t-Form-inputContainer u-tC' + (curr_lang==index? ' selected':'') + '\">' + apex.util.escapeHTMLAttr(lang) + '</td>' +\n       '  <td class=\"t-Report-cell t-Form-inputContainer u-tL' + (curr_lang==index? ' selected':'') + '\">' + \n       '    <input type=\"text\" class=\"text_field\" data-lang=\"' + lang + '\" value=\"' + apex.util.escapeHTMLAttr(uiw._hasTag(lang)) + '\" size=\"' + uiw._values.fieldSize + '\" maxlength=\"' + uiw._values.fieldMaxLength + '\"></td>' +\n       ' </tr>\\n';\n     });\n     langTable +=\n     '</table>\\n';\n\n      dialogHtml =\n           '<div class=\"jtlitem-dialog\"><div class=\"jtlitem-container ui-widget\">\\n' +\n           '  <div class=\"jtlitem-button-container\">\\n' +\n           '     <button class=\"jtlitem-cancel-button t-Button\">' +\n           '       <span class=\"t-Button-label\">' + uiw._values.messages.cancelButton + '</span>' +\n           // '       <span class=\"ui-icon ui-icon-close\"></span>' + \n           '     </button>\\n' +\n           '     <button class=\"jtlitem-save-button t-Button t-Button--hot\">' + \n           '       <span class=\"t-Button-label\">' + uiw._values.messages.applyChanges + '</span>' +\n           '       <span class=\"t-Icon t-Icon--right fa fa-check\"></span>' + \n           '     </button>\\n' +\n           '  </div>\\n' +\n           '  <div class=\"jtlitem-content\">\\n' +\n              langTable +\n           '  </div>\\n' +\n           '</div></div>\\n';\n\n      uiw._elements.$body.append(dialogHtml);\n\n      uiw._initElements();\n\n     // open created div as a dialog\n     uiw._elements.$dialog.dialog({\n         closeOnEscape: true,\n         title:         uiw.options.dialogTitle,\n         autoResize:    true,\n         minWidth:      400,\n         minHeight:     250,\n         width:         'auto',\n         height:        'auto',\n         modal:         true,\n         position:      { my: \"left\", at: \"left center\", of: uiw._elements.$displayInput[0] },\n         open: function() {\n            uiw._initDialogElements();\n            uiw._initDialogButtons();\n            uiw._elements.$dialogContent.find('input').first().focus();\n         },\n         close: function() {\n\n            $(this).dialog('destroy');\n            uiw._elements.$dialog.remove();\n            uiw._elements.$document.find('div.jtlitem-dialog').remove();\n\n            if (uiw._values.focusOnClose === 'BUTTON') {\n               uiw._elements.$mlsButton.focus();\n            } else if (uiw._values.focusOnClose === 'INPUT') {\n               uiw._elements.$displayInput.focus();\n            }\n\n            uiw._values.focusOnClose = 'BUTTON';\n         }\n       })\n       .on('keydown', function(evt) {\n           if (evt.keyCode === $.ui.keyCode.ESCAPE) {\n               uiw._elements.$dialog.dialog('close');\n           }                \n           evt.stopPropagation();\n       });\n\n\n  },\n  disable: function() {\n     var uiw = this;\n\n     if (uiw._values.disabled === false) {\n        uiw._elements.$displayInput\n           .attr('disabled','disabled');\n        uiw._elements.$hiddenInput.attr('disabled','disabled');\n\n        uiw._elements.$mlsButton\n           .attr('disabled','disabled')\n           .unbind('click', uiw._handleOpenClick);\n     }\n\n     uiw._values.disabled = true;\n  },\n  enable: function() {\n     var uiw = this;\n\n     if (uiw._values.disabled === true) {\n       uiw._elements.$displayInput.removeAttr('disabled');\n       uiw._elements.$hiddenInput.removeAttr('disabled');\n       uiw._elements.$mlsButton\n          .removeAttr('disabled')\n          .bind('click', {uiw: uiw}, uiw._handleOpenClick);\n\n       uiw._values.disabled = false;\n     }\n  }\n});"],"file":"jtl_item.js"}